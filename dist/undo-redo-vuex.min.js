!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var o in t)("object"==typeof exports?exports:e)[o]=t[o]}}(window,function(){return function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n),t.d(n,"undo",function(){return a}),t.d(n,"redo",function(){return c}),t.d(n,"scaffoldState",function(){return r}),t.d(n,"scaffoldActions",function(){return i}),t.d(n,"scaffoldMutations",function(){return d}),t.d(n,"scaffoldStore",function(){return u});const o=()=>{},a=o,c=o,r=e=>({...e,canUndo:!1,canRedo:!1}),i=e=>({...e,undo:a,redo:c}),d=e=>({...e,updateCanUndoRedo:(e,n)=>{void 0!==n.canUndo&&(e.canUndo=n.canUndo),void 0!==n.canRedo&&(e.canRedo=n.canRedo)}}),u=e=>({...e,state:r(e.state||{}),actions:i(e.actions||{}),mutations:d(e.mutations||{})});n.default=(e=>n=>{const t=({namespace:e="",ignoreMutations:n=[]})=>({namespace:e,ignoreMutations:n,done:[],undone:[],newMutation:!0}),o=e.paths?e.paths.map(({namespace:e,ignoreMutations:n})=>t({namespace:`${e}/`,...n?{ignoreMutations:n.map(n=>`${e}/${n}`).concat(`${e}/updateCanUndoRedo`)}:{}})):[t({ignoreMutations:[...e.ignoreMutations||[],"updateCanUndoRedo"]})],a=e=>o.find(n=>n.namespace===e)||{},c=e=>{const n=a(e);return!!Object.keys(n).length&&n.undone.length>0},r=e=>{const n=a(e);return!!n&&n.done.length>0},i=e=>{const t=r(e),o=c(e);n.commit(`${e}updateCanUndoRedo`,{canUndo:t}),n.commit(`${e}updateCanUndoRedo`,{canRedo:o})},d=e=>e.filter(({action:e})=>!!e).reduce((e,{action:t,payload:o})=>e.then(()=>n.dispatch(t,o)),Promise.resolve()),u=(e,n)=>{const t=o.findIndex(n=>n.namespace===e);o.splice(t,1,n)};n.subscribe(e=>{const n=e.type.split("/").length>1?`${e.type.split("/")[0]}/`:"",t=a(n);if(Object.keys(t).length){const{ignoreMutations:o,newMutation:a,done:c}=t;e.type!==`${n}emptyState`&&e.type!==`${n}updateCanUndoRedo`&&-1===o.indexOf(e.type)&&e.type.includes(n)&&a&&(c.push(e),u(n,{...t,done:c}),i(n))}}),n.subscribeAction(async e=>{const t=e.type.split("/").length>1?`${e.type.split("/")[0]}/`:"";switch(e.type){case`${t}redo`:c(t)&&await(async e=>{const t=a(e);if(Object.keys(t).length){const{undone:o,commits:a}=t.undone.reduceRight(({commits:e,undone:n,proceed:t},o)=>{if(e.length)if(t){const a=e[e.length-1],{actionGroup:c}=a.payload;e=[...(t=o.payload.actionGroup&&o.payload.actionGroup===c)?[o]:[],...e],n=[...t?[]:[o],...n]}else n=[o,...n];else e=[o],t=!!o.payload.actionGroup;return{commits:e,undone:n,proceed:t}},{commits:[],undone:[],proceed:!0});t.newMutation=!1;const c=a.map(async({type:t,payload:o})=>{n.commit(t,Array.isArray(o)?[...o]:o.constructor(o));const{redoCallback:a}=o;return{action:a?`${e}${a}`:"",payload:o}});await d(await Promise.all(c)),t.done=[...t.done,...a],t.newMutation=!0,u(e,{...t,undone:o}),i(e)}})(t);break;case`${t}undo`:r(t)&&await(async e=>{const t=a(e);if(Object.keys(t).length){const{done:o,commits:a}=t.done.reduceRight(({commits:e,done:n,proceed:t},o)=>{if(e.length)if(t){const a=e[e.length-1],{actionGroup:c}=a.payload;e=[...(t=o.payload.actionGroup&&o.payload.actionGroup===c)?[o]:[],...e],n=[...t?[]:[o],...n]}else n=[o,...n];else e=[o],t=!!o.payload.actionGroup;return{done:n,commits:e,proceed:t}},{done:[],commits:[],proceed:!0}),c=a.map(({payload:n})=>({action:n.undoCallback?`${e}${n.undoCallback}`:"",payload:n}));await d(c);const r=[...t.undone,...a];t.newMutation=!1,n.commit(`${e}emptyState`);const s=o.map(async t=>{n.commit(t.type,Array.isArray(t.payload)?[...t.payload]:t.payload.constructor(t.payload));const{redoCallback:o}=t.payload;return{action:o?`${e}${o}`:"",payload:t.payload}});await d(await Promise.all(s)),t.newMutation=!0,u(e,{...t,done:o,undone:r}),i(e)}})(t)}})})}])});